/**
 * domain/Ship.java
 *
 * File generated from the Ship uml Class
 * Generated by the Acceleo UML 2.1 to Java generator module (Obeo)
 * $ Date : 04/08/11 20:26:34 (4 ao√ªt 2011) $
 */
package domain;

import infrastructure.NonExistingShip;
import infrastructure.PrivateAccessor;
import events.ShipArrivalNotifiedEvent;
import events.ShipDepartureNotifiedEvent;

import java.util.Date;
import java.util.UUID;

public class Ship extends AggregateRoot{
		private String name;
		private Cargo cargo;
		private Port port;
		
		public Ship(){
			super(UUID.randomUUID());
		}
		
		public Ship(UUID shipId){
			super(shipId);
		}
		
		public Ship(String name, Cargo cargo, Port port) {
			this();
			this.name = name;
			this.cargo = cargo;
			this.port = port;
		}
		
		public UUID getId() {return id;	}
		public String getName() {return name;}
		public void setName(String name) {this.name = name;}
		public Cargo getCargo() {return cargo;}
		public void setCargo(Cargo cargo) {this.cargo = cargo;}
		public Port getPort() {return port;}
		public void setPort(Port port) {this.port = port;}
		
		public void setArrival(String fromCity, String fromCountry){
			this.port.setCity(fromCity);
			this.port.setCountry(fromCountry);
		}
		
		public void setDeparture(String toCity, String toCountry){
			this.port.setCity(toCity);
			this.port.setCountry(toCountry);
		}
		
		public void registerEvents() throws NoSuchMethodException, SecurityException{
			registerEvent(ShipArrivalNotifiedEvent.class, PrivateAccessor.getPrivateMethod(this,"onNotifyShipArrival"));
			registerEvent(ShipDepartureNotifiedEvent.class, PrivateAccessor.getPrivateMethod(this,"onNotifyShipDeparture"));
		}
		
		private void isShipCreated(){
			if(this.id == null){
				try {
					throw new NonExistingShip("The Ship has not been created and no operations can be executed on it.");
				}catch (NonExistingShip e) {
					e.printStackTrace();
				}
			}
		}
		
		//Events Creations
		@SuppressWarnings("unused")
		private void onNotifyShipArrival(UUID aggregateId, Date occured, Port fromPort){
			isShipCreated();
			applyChange(new ShipArrivalNotifiedEvent(aggregateId, this.name, occured, this.cargo, fromPort));
		}
		@SuppressWarnings("unused")
		private void onNotifyShipDeparture(UUID aggregateId,Date occured, Port toPort){
			isShipCreated();
			applyChange(new ShipDepartureNotifiedEvent(aggregateId, this.name, occured, this.cargo, toPort));
		}
		
		
		//Events Executions
		public void onShipArrivalNotified(ShipArrivalNotifiedEvent event){
			this.port = event._FromPort;
		}
		public void onShipDepartureNotified(ShipDepartureNotifiedEvent event){
			this.port = event._ToPort;
		}
}



















