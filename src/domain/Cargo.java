/**
 * domain/Cargo.java
 *
 * File generated from the Cargo uml Class
 * Generated by the Acceleo UML 2.1 to Java generator module (Obeo)
 * $ Date : 04/08/11 20:26:34 (4 ao√ªt 2011) $
 */
package domain;

import infrastructure.NonExistingCargo;
import infrastructure.PrivateAccessor;

import java.util.UUID;

import events.NewCargoCreatedEvent;

/**
 * Description of the class Cargo.
 *
 */

public class Cargo extends AggregateRoot {
		private String name;
		
		public Cargo(UUID cargoId){
			super(cargoId);
		}
		
		public Cargo(String name) {
			super(UUID.randomUUID());
			this.name = name;
			newCargoCreated(this.id, this.name);
		}
		
		@Override
		public UUID getId() {return this.id;}
		
		@Override
		protected void registerEvents() throws NoSuchMethodException, SecurityException {
			registerEvent(NewCargoCreatedEvent.class, PrivateAccessor.getPrivateMethod(this,"onNewCargoCreated"));
		}
		
		//Events Creations
		private void newCargoCreated(UUID aggregateId, String name){
			apply(new  NewCargoCreatedEvent(aggregateId, name)); //We Create the relative Event
		}
		
		//Events Executions
		@SuppressWarnings("unused")
		private void onNewCargoCreated(NewCargoCreatedEvent event){
			this.id = event.getAggregateId();
			this.name = event.getName();
		}

		public String getName() {return name;}
		public void updateName(String name) {this.name = name;}
		
		
		@SuppressWarnings("unused")
		private void isCargoCreated(){
			if(this.id == null){
				try {
					throw new NonExistingCargo("The cargo has not been created and no operations can be executed on it.");
				}catch (NonExistingCargo e) {
					e.printStackTrace();
				}
			}
		}		
		
}