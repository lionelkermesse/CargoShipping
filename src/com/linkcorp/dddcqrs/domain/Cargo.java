/**
 * domain/Cargo.java
 *
 * File generated from the Cargo uml Class
 * Generated by the Acceleo UML 2.1 to Java generator module (Obeo)
 * $ Date : 04/08/11 20:26:34 (4 ao√ªt 2011) $
 */
package com.linkcorp.dddcqrs.domain;


import java.util.UUID;

import com.linkcorp.dddcqrs.annotations.AggregateRootAnnotation;
import com.linkcorp.dddcqrs.events.NewCargoCreatedEvent;
import com.linkcorp.dddcqrs.infrastructure.NonExistingCargo;

/**
 * Description of the class Cargo.
 *
 */

@AggregateRootAnnotation
public class Cargo extends AggregateRoot {
		private String name;
		
		public Cargo(UUID cargoId){
			super(cargoId);
		}
		
		public Cargo(String name) {
			super(UUID.randomUUID());
			this.name = name;
			newCargoCreated(this.id, this.name);
		}
		
		@Override
		public UUID getId() {return this.id;}
		
		//Events Creations
		private void newCargoCreated(UUID aggregateId, String name){
			NewCargoCreatedEvent event = new  NewCargoCreatedEvent(aggregateId, name);
			onNewCargoCreated(event);
			apply(event); //We Create the relative Event
		}
		
		//Events Executions
		private void onNewCargoCreated(NewCargoCreatedEvent event){
			this.id = event.getAggregateId();
			this.name = event.getName();
		}

		public String getName() {return name;}
		public void updateName(String name) {this.name = name;}
		
		@SuppressWarnings("unused")
		private void isCargoCreated(){
			if(this.id == null){
				try {
					throw new NonExistingCargo("The cargo has not been created and no operations can be executed on it.");
				}catch (NonExistingCargo e) {
					e.printStackTrace();
				}
			}
		}		
		
}