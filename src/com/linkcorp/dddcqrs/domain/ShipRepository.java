/**
 * repositories/ShipRepository.java
 *
 * File generated from the ShipRepository uml Class
 * Generated by the Acceleo UML 2.1 to Java generator module (Obeo)
 * $ Date : 04/08/11 20:26:34 (4 ao√ªt 2011) $
 */
package com.linkcorp.dddcqrs.domain;

import java.util.List;
import java.util.UUID;

//import javax.inject.Named;

import com.linkcorp.dddcqrs.annotations.DomainRepositoryAnnotation;
import com.linkcorp.dddcqrs.events.Event;
import com.linkcorp.dddcqrs.infrastructure.AggregateNotFoundException;
import com.linkcorp.dddcqrs.infrastructure.ConcurrencyException;

//@Named
@DomainRepositoryAnnotation
public class ShipRepository implements IDomainRepository<Ship>{
	private IEventStore eventStore;
	

	public ShipRepository() {
		this.eventStore = new EventStore();
	}
	
	public ShipRepository(IEventStore eventStore) {
		this.eventStore = eventStore;
	}

	public void save(Ship aggregate) throws ConcurrencyException {
		eventStore.addEvents(aggregate.getId(), aggregate.getUncommitedChanges());
	}

	public Ship getById(UUID aggregateId) throws AggregateNotFoundException {
		Ship ship = new Ship(aggregateId);
		List<Event> events = eventStore.getEventsForAggregate(aggregateId);
		ship.loadsFromHistory(events); //Here we fetch all events reflecting the last state for the current aggregate. 
		
		return ship;
	}
}